import { describe, expect, test } from "bun:test"
import {
	seq,
	sne,
	slt,
	sle,
	sgt,
	sge,
	seqz,
	snez,
	sltz,
	slez,
	sgtz,
	sgez,
	sap,
	sapz,
	sna,
	snaz,
	snan,
	snanz,
	select,
} from "../comparison"

describe("comparison", () => {
	test("seq", () => {
		expect(seq(0, -0)).toBe(1)
		expect(seq(0, 0)).toBe(1)
		expect(seq(1, 1)).toBe(1)
		expect(seq(-1, -1)).toBe(1)
		expect(seq(1, -1)).toBe(0)
		expect(seq(-1, 1)).toBe(0)
		expect(seq(NaN, NaN)).toBe(0)
		expect(seq(NaN, 1)).toBe(0)
		expect(seq(1, NaN)).toBe(0)
		expect(seq(Infinity, Infinity)).toBe(1)
		expect(seq(-Infinity, -Infinity)).toBe(1)
		expect(seq(Infinity, -Infinity)).toBe(0)
		expect(seq(-Infinity, Infinity)).toBe(0)
	})
	test("sne", () => {
		expect(sne(0, -0)).toBe(0)
		expect(sne(1, 1)).toBe(0)
		expect(sne(-1, -1)).toBe(0)
		expect(sne(1, -1)).toBe(1)
		expect(sne(-1, 1)).toBe(1)
		expect(sne(NaN, NaN)).toBe(1)
		expect(sne(NaN, 1)).toBe(1)
	})
	test("slt", () => {
		expect(slt(0, -0)).toBe(0)
		expect(slt(1, 1)).toBe(0)
		expect(slt(-1, -1)).toBe(0)
		expect(slt(1, -1)).toBe(0)
		expect(slt(-1, 1)).toBe(1)
		expect(slt(NaN, NaN)).toBe(0)
		expect(slt(NaN, 1)).toBe(0)
	})
	test("sle", () => {
		expect(sle(0, -0)).toBe(1)
		expect(sle(1, 1)).toBe(1)
		expect(sle(-1, -1)).toBe(1)
		expect(sle(1, -1)).toBe(0)
		expect(sle(-1, 1)).toBe(1)
		expect(sle(NaN, NaN)).toBe(0)
		expect(sle(NaN, 1)).toBe(0)
	})
	test("sgt", () => {
		expect(sgt(0, -0)).toBe(0)
		expect(sgt(1, 1)).toBe(0)
		expect(sgt(-1, -1)).toBe(0)
		expect(sgt(1, -1)).toBe(1)
		expect(sgt(-1, 1)).toBe(0)
		expect(sgt(NaN, NaN)).toBe(0)
		expect(sgt(NaN, 1)).toBe(0)
	})
	test("sge", () => {
		expect(sge(0, -0)).toBe(1)
		expect(sge(1, 1)).toBe(1)
		expect(sge(-1, -1)).toBe(1)
		expect(sge(1, -1)).toBe(1)
		expect(sge(-1, 1)).toBe(0)
		expect(sge(NaN, NaN)).toBe(0)
		expect(sge(NaN, 1)).toBe(0)
	})
	test("seqz", () => {
		expect(seqz(0)).toBe(1)
		expect(seqz(-0)).toBe(1)
		expect(seqz(1)).toBe(0)
		expect(seqz(-1)).toBe(0)
		expect(seqz(NaN)).toBe(0)
		expect(seqz(Infinity)).toBe(0)
		expect(seqz(-Infinity)).toBe(0)
	})
	test("snez", () => {
		expect(snez(0)).toBe(0)
		expect(snez(-0)).toBe(0)
		expect(snez(1)).toBe(1)
		expect(snez(-1)).toBe(1)
		expect(snez(NaN)).toBe(1)
		expect(snez(Infinity)).toBe(1)
		expect(snez(-Infinity)).toBe(1)
	})
	test("sltz", () => {
		expect(sltz(0)).toBe(0)
		expect(sltz(-0)).toBe(0)
		expect(sltz(1)).toBe(0)
		expect(sltz(-1)).toBe(1)
		expect(sltz(NaN)).toBe(0)
		expect(sltz(Infinity)).toBe(0)
		expect(sltz(-Infinity)).toBe(1)
	})
	test("slez", () => {
		expect(slez(0)).toBe(1)
		expect(slez(-0)).toBe(1)
		expect(slez(1)).toBe(0)
		expect(slez(-1)).toBe(1)
		expect(slez(NaN)).toBe(0)
		expect(slez(Infinity)).toBe(0)
		expect(slez(-Infinity)).toBe(1)
	})
	test("sgtz", () => {
		expect(sgtz(0)).toBe(0)
		expect(sgtz(-0)).toBe(0)
		expect(sgtz(1)).toBe(1)
		expect(sgtz(-1)).toBe(0)
		expect(sgtz(NaN)).toBe(0)
		expect(sgtz(Infinity)).toBe(1)
		expect(sgtz(-Infinity)).toBe(0)
	})
	test("sgez", () => {
		expect(sgez(0)).toBe(1)
		expect(sgez(-0)).toBe(1)
		expect(sgez(1)).toBe(1)
		expect(sgez(-1)).toBe(0)
		expect(sgez(NaN)).toBe(0)
		expect(sgez(Infinity)).toBe(1)
		expect(sgez(-Infinity)).toBe(0)
	})
	test("sap", () => {
		expect(sap(1, 1, 1)).toBe(1)
		expect(sap(1, 1 + 1e-7, 1)).toBe(1)
		expect(sap(1, 1 + 1e-7, 0)).toBe(0)
		expect(sap(1, 1 + 1e-7, -0)).toBe(0)
		expect(sap(10, 10 + 10, 1)).toBe(1)
		expect(sap(10, 5, 0.5)).toBe(1)
		expect(sap(10, 5 - 1e-10, 0.5)).toBe(0)
		expect(sap(NaN, NaN, 1)).toBe(0)
		expect(sap(NaN, 1, 1)).toBe(0)
		expect(sap(1, NaN, 1)).toBe(0)
		expect(sap(Infinity, Infinity, 1)).toBe(0)
		expect(sap(Infinity, Infinity, Infinity)).toBe(0)
		expect(sap(Infinity, 1, 1)).toBe(1)
		expect(sap(Infinity, 1, 0)).toBe(0)
		expect(sap(1, 0, Infinity)).toBe(1)
	})
	test("sapz", () => {
		expect(sapz(0, 1)).toBe(1)
		expect(sapz(1e-7, 1)).toBe(1)
		expect(sapz(-1e-7, 1)).toBe(1)
		expect(sapz(1e-7, 0.1)).toBe(0)
		expect(sapz(-1e-7, 0.1)).toBe(0)
		expect(sapz(NaN, 1)).toBe(0)
		expect(sapz(1, NaN)).toBe(0)
		expect(sapz(Infinity, 1)).toBe(1)
		expect(sapz(-Infinity, 1)).toBe(1)
		expect(sapz(Infinity, 0)).toBe(0)
		expect(sapz(-Infinity, 0)).toBe(0)
		expect(sapz(1e-7, Infinity)).toBe(1)
	})
	test("sna", () => {
		expect(sna(1, 1, 1)).toBe(0)
		expect(sna(1, 1 + 1e-7, 1)).toBe(0)
		expect(sna(1, 1 + 1e-7, 0)).toBe(1)
		expect(sna(1, 1 + 1e-7, -0)).toBe(1)
		expect(sna(10, 10 + 10, 1)).toBe(0)
		expect(sna(10, 5, 0.5)).toBe(0)
		expect(sna(10, 5 - 1e-10, 0.5)).toBe(1)
		expect(sna(NaN, NaN, 1)).toBe(0)
		expect(sna(NaN, 1, 1)).toBe(0)
		expect(sna(1, NaN, 1)).toBe(0)
		expect(sna(Infinity, Infinity, 1)).toBe(0)
		expect(sna(Infinity, Infinity, Infinity)).toBe(0)
		expect(sna(Infinity, 1, 1)).toBe(0)
		expect(sna(Infinity, 1, 0)).toBe(0)
		expect(sna(1, 0, Infinity)).toBe(0)
	})
	test("snaz", () => {
		expect(snaz(0, 1)).toBe(0)
		expect(snaz(1e-7, 1)).toBe(0)
		expect(snaz(-1e-7, 1)).toBe(0)
		expect(snaz(1e-7, 0.1)).toBe(1)
		expect(snaz(-1e-7, 0.1)).toBe(1)
		expect(snaz(NaN, 1)).toBe(0)
		expect(snaz(1, NaN)).toBe(0)
		expect(snaz(Infinity, 1)).toBe(0)
		expect(snaz(-Infinity, 1)).toBe(0)
		expect(snaz(Infinity, 0)).toBe(0)
		expect(snaz(-Infinity, 0)).toBe(0)
		expect(snaz(1e-7, Infinity)).toBe(0)
	})
	test("snan", () => {
		expect(snan(NaN)).toBe(1)
		expect(snan(0)).toBe(0)
		expect(snan(1)).toBe(0)
		expect(snan(-1)).toBe(0)
		expect(snan(Infinity)).toBe(0)
		expect(snan(-Infinity)).toBe(0)
	})
	test("snanz", () => {
		expect(snanz(NaN)).toBe(0)
		expect(snanz(0)).toBe(1)
		expect(snanz(1)).toBe(1)
		expect(snanz(-1)).toBe(1)
		expect(snanz(Infinity)).toBe(1)
		expect(snanz(-Infinity)).toBe(1)
	})
	test("select", () => {
		expect(select(0, 1, 2)).toBe(2)
		expect(select(1, 1, 2)).toBe(1)
		expect(select(-1, 1, 2)).toBe(1)
		expect(select(0, -1, -2)).toBe(-2)
		expect(select(1, -1, -2)).toBe(-1)
		expect(select(-1, -1, -2)).toBe(-1)
		expect(select(NaN, 1, 2)).toBe(1)
		expect(select(1, NaN, 2)).toBe(NaN)
		expect(select(0, NaN, 2)).toBe(2)
		expect(select(1, 1, NaN)).toBe(1)
		expect(select(0, 1, NaN)).toBe(NaN)
	})
})
