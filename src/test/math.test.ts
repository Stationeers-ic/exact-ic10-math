import { describe, expect, test } from "bun:test"
import { abs, add, sub, mul, div, mod, pow, sqrt, log, exp, min, max, lerp, move } from "../math"

describe("math", () => {
	test("abs", () => {
		expect(abs(0)).toBe(0)
		expect(abs(-0)).toBe(0)
		expect(abs(1)).toBe(1)
		expect(abs(-1)).toBe(1)
		expect(abs(1.99)).toBe(1.99)
		expect(abs(-1.99)).toBe(1.99)
		expect(abs(2147483647)).toBe(2147483647)
		expect(abs(-2147483648)).toBe(2147483648)
		expect(abs(9223372036854776000)).toBe(9223372036854776000)
		expect(abs(-9223372036854776000)).toBe(9223372036854776000)
		expect(abs(9223372036854777000)).toBe(9223372036854778000)
		expect(abs(-9223372036854777000)).toBe(9223372036854778000)
		expect(abs(NaN)).toBe(NaN)
		expect(abs(Infinity)).toBe(Infinity)
		expect(abs(-Infinity)).toBe(Infinity)
	})
	test("add", () => {
		expect(add(0, 0)).toBe(0)
		expect(add(0.1, 0.2)).toBe(0.30000000000000004)
		expect(add(1, 1)).toBe(2)
		expect(add(-1, -1)).toBe(-2)
		expect(add(1.5, 1.5)).toBe(3)
		expect(add(-1.5, -1.5)).toBe(-3)
		expect(add(2147483647, 1)).toBe(2147483648)
		expect(add(-2147483648, -1)).toBe(-2147483649)
		expect(add(Number.MAX_SAFE_INTEGER + 1, 1)).toBe(Number.MAX_SAFE_INTEGER + 1)
		expect(add(Number.MIN_SAFE_INTEGER - 1, -1)).toBe(Number.MIN_SAFE_INTEGER - 1)
		expect(add(9223372036854776000, 1)).toBe(9223372036854776000)
		expect(add(-9223372036854776000, -1)).toBe(-9223372036854776000)
		expect(add(9223372036854777000, 1)).toBe(9223372036854778000)
		expect(add(-9223372036854777000, -1)).toBe(-9223372036854778000)
		expect(add(NaN, 1)).toBe(NaN)
		expect(add(1, NaN)).toBe(NaN)
		expect(add(NaN, NaN)).toBe(NaN)
		expect(add(Infinity, 1)).toBe(Infinity)
		expect(add(1, Infinity)).toBe(Infinity)
		expect(add(-Infinity, 1)).toBe(-Infinity)
		expect(add(1, -Infinity)).toBe(-Infinity)
	})
	test("sub", () => {
		expect(sub(0, 0)).toBe(0)
		expect(sub(0.3, 0.2)).toBe(0.09999999999999998)
		expect(sub(1, 1)).toBe(0)
		expect(sub(-1, -1)).toBe(0)
		expect(sub(1.5, 1.5)).toBe(0)
		expect(sub(-1.5, -1.5)).toBe(0)
		expect(sub(2147483647, 1)).toBe(2147483646)
		expect(sub(-2147483648, -1)).toBe(-2147483647)
		expect(sub(NaN, 1)).toBe(NaN)
		expect(sub(1, NaN)).toBe(NaN)
		expect(sub(NaN, NaN)).toBe(NaN)
		expect(sub(Infinity, 1)).toBe(Infinity)
		expect(sub(1, Infinity)).toBe(-Infinity)
		expect(sub(-Infinity, 1)).toBe(-Infinity)
		expect(sub(1, -Infinity)).toBe(Infinity)
	})
	test("mul", () => {
		expect(mul(0, 0)).toBe(0)
		expect(mul(0.1, 0.2)).toBe(0.020000000000000004)
		expect(mul(1, 1)).toBe(1)
		expect(mul(-1, -1)).toBe(1)
		expect(mul(1, -1)).toBe(-1)
		expect(mul(1.5, 1.5)).toBe(2.25)
		expect(mul(-1.5, -1.5)).toBe(2.25)
		expect(mul(2147483647, 2)).toBe(4294967294)
		expect(mul(-2147483648, 2)).toBe(-4294967296)
		expect(mul(NaN, 1)).toBe(NaN)
		expect(mul(1, NaN)).toBe(NaN)
		expect(mul(NaN, NaN)).toBe(NaN)
		expect(mul(Infinity, 1)).toBe(Infinity)
		expect(mul(1, Infinity)).toBe(Infinity)
		expect(mul(-Infinity, 1)).toBe(-Infinity)
		expect(mul(1, -Infinity)).toBe(-Infinity)
	})
	test("div", () => {
		expect(div(0, 1)).toBe(0)
		expect(div(1, 0)).toBe(Infinity)
		expect(div(-1, 0)).toBe(-Infinity)
		expect(div(1, 0)).toBe(Infinity)
		expect(div(1, -0)).toBe(-Infinity)
		expect(div(0, 0)).toBe(NaN)
		expect(div(0.3, 0.2)).toBe(1.4999999999999998)
		expect(div(1, 1)).toBe(1)
		expect(div(-1, -1)).toBe(1)
		expect(div(1, -1)).toBe(-1)
		expect(div(1.5, 1.5)).toBe(1)
		expect(div(-1.5, -1.5)).toBe(1)
		expect(div(2147483647, 2)).toBe(1073741823.5)
		expect(div(-2147483648, 2)).toBe(-1073741824)
		expect(div(NaN, 1)).toBe(NaN)
		expect(div(1, NaN)).toBe(NaN)
		expect(div(NaN, NaN)).toBe(NaN)
		expect(div(Infinity, 1)).toBe(Infinity)
		expect(div(1, Infinity)).toBe(0)
		expect(div(-Infinity, 1)).toBe(-Infinity)
		expect(div(1, -Infinity)).toBe(-0)
	})
	test("mod", () => {
		expect(mod(0, 1)).toBe(0)
		expect(mod(1, 0)).toBe(NaN)
		expect(mod(-1, 0)).toBe(NaN)
		expect(mod(-2, 10)).toBe(8)
		expect(mod(0.3, 0.2)).toBe(0.09999999999999998)
		expect(mod(1, 1)).toBe(0)
		expect(mod(-1, -1)).toBe(-0)
		expect(mod(1, -1)).toBe(0)
		expect(mod(1.5, 1.5)).toBe(0)
		expect(mod(-1.5, -1.5)).toBe(-0)
		expect(mod(2147483647, 2)).toBe(1)
		expect(mod(-2147483648, 2)).toBe(-0)
		expect(mod(2147483647, -2)).toBe(1)
		expect(mod(-2147483648, -2)).toBe(-0)
		expect(mod(NaN, 1)).toBe(NaN)
		expect(mod(1, NaN)).toBe(NaN)
		expect(mod(NaN, NaN)).toBe(NaN)
		expect(mod(Infinity, 1)).toBe(NaN)
		expect(mod(1, Infinity)).toBe(1)
		expect(mod(-Infinity, 1)).toBe(NaN)
		expect(mod(1, -Infinity)).toBe(1)
	})
	test("pow", () => {
		expect(pow(0, 0)).toBe(1)
		expect(pow(0, 1)).toBe(0)
		expect(pow(1, 0)).toBe(1)
		expect(pow(2, 3)).toBe(8)
		expect(pow(2, -3)).toBe(0.125)
		expect(pow(-2, 3)).toBe(-8)
		expect(pow(-2, -3)).toBe(-0.125)
		expect(pow(4, 0.5)).toBe(2)
		expect(pow(-4, 0.5)).toBe(NaN)
		expect(pow(NaN, 2)).toBe(NaN)
		expect(pow(2, NaN)).toBe(NaN)
		expect(pow(NaN, NaN)).toBe(NaN)
		expect(pow(Infinity, 2)).toBe(Infinity)
		expect(pow(2, Infinity)).toBe(Infinity)
		expect(pow(-Infinity, 2)).toBe(Infinity)
		expect(pow(-Infinity, 3)).toBe(-Infinity)
		expect(pow(2, -Infinity)).toBe(0)
		expect(pow(-2, -Infinity)).toBe(0)
	})
	test("sqrt", () => {
		expect(sqrt(0)).toBe(0)
		expect(sqrt(4)).toBe(2)
		expect(sqrt(2)).toBe(Math.SQRT2)
		expect(sqrt(-1)).toBe(NaN)
		expect(sqrt(NaN)).toBe(NaN)
		expect(sqrt(Infinity)).toBe(Infinity)
		expect(sqrt(-Infinity)).toBe(NaN)
	})
	test("log", () => {
		expect(log(1)).toBe(0)
		expect(log(Math.E)).toBe(1)
		expect(log(0)).toBe(-Infinity)
		expect(log(-1)).toBe(NaN)
		expect(log(NaN)).toBe(NaN)
		expect(log(Infinity)).toBe(Infinity)
		expect(log(-Infinity)).toBe(NaN)
	})
	test("exp", () => {
		expect(exp(0)).toBe(1)
		expect(exp(1)).toBe(Math.E)
		expect(exp(-1)).toBe(1 / Math.E)
		expect(exp(NaN)).toBe(NaN)
		expect(exp(Infinity)).toBe(Infinity)
		expect(exp(-Infinity)).toBe(0)
	})
	test("min", () => {
		expect(min(0, -0)).toBe(-0)
		expect(min(1, 2)).toBe(1)
		expect(min(2, 1)).toBe(1)
		expect(min(-1, -2)).toBe(-2)
		expect(min(-2, -1)).toBe(-2)
		expect(min(1, -1)).toBe(-1)
		expect(min(-1, 1)).toBe(-1)
		expect(min(1, 1)).toBe(1)
		expect(min(NaN, 1)).toBe(NaN)
		expect(min(1, NaN)).toBe(NaN)
		expect(min(NaN, NaN)).toBe(NaN)
		expect(min(Infinity, 1)).toBe(1)
		expect(min(1, Infinity)).toBe(1)
		expect(min(-Infinity, 1)).toBe(-Infinity)
		expect(min(1, -Infinity)).toBe(-Infinity)
	})
	test("max", () => {
		expect(max(0, -0)).toBe(0)
		expect(max(1, 2)).toBe(2)
		expect(max(2, 1)).toBe(2)
		expect(max(-1, -2)).toBe(-1)
		expect(max(-2, -1)).toBe(-1)
		expect(max(1, -1)).toBe(1)
		expect(max(-1, 1)).toBe(1)
		expect(max(1, 1)).toBe(1)
		expect(max(NaN, 1)).toBe(NaN)
		expect(max(1, NaN)).toBe(NaN)
		expect(max(NaN, NaN)).toBe(NaN)
		expect(max(Infinity, 1)).toBe(Infinity)
		expect(max(1, Infinity)).toBe(Infinity)
		expect(max(-Infinity, 1)).toBe(1)
		expect(max(1, -Infinity)).toBe(1)
	})
	test("lerp", () => {
		expect(lerp(0, 10, 0)).toBe(0)
		expect(lerp(0, 10, 1)).toBe(10)
		expect(lerp(0, 10, 0.5)).toBe(5)
		expect(lerp(10, 20, 0.25)).toBe(12.5)
		expect(lerp(-10, 10, 0.5)).toBe(0)
		expect(lerp(-10, -20, 0.5)).toBe(-15)
		expect(lerp(0, 10, -1)).toBe(0)
		expect(lerp(0, 10, 2)).toBe(10)
		expect(lerp(NaN, 10, 0.5)).toBe(NaN)
		expect(lerp(0, NaN, 0.5)).toBe(NaN)
		expect(lerp(0, 10, NaN)).toBe(NaN)
		expect(lerp(NaN, NaN, NaN)).toBe(NaN)
		expect(lerp(Infinity, 10, 0.5)).toBe(NaN)
		expect(lerp(0, Infinity, 0.5)).toBe(Infinity)
		expect(lerp(0, 10, Infinity)).toBe(10)
		expect(lerp(-Infinity, 10, 0.5)).toBe(NaN)
		expect(lerp(0, -Infinity, 0.5)).toBe(-Infinity)
		expect(lerp(0, 10, -Infinity)).toBe(0)
	})
	test("move", () => {
		expect(move(0)).toBe(0)
		expect(move(-0)).toBe(-0)
		expect(move(1)).toBe(1)
		expect(move(-1)).toBe(-1)
		expect(move(1.99)).toBe(1.99)
		expect(move(-1.99)).toBe(-1.99)
		expect(move(2147483647)).toBe(2147483647)
		expect(move(-2147483648)).toBe(-2147483648)
		expect(move(9223372036854776000)).toBe(9223372036854776000)
		expect(move(-9223372036854776000)).toBe(-9223372036854776000)
		expect(move(9223372036854777000)).toBe(9223372036854778000)
		expect(move(-9223372036854777000)).toBe(-9223372036854778000)
		expect(move(NaN)).toBe(NaN)
		expect(move(Infinity)).toBe(Infinity)
		expect(move(-Infinity)).toBe(-Infinity)
	})
})
