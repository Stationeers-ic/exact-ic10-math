import { describe, expect, test } from "bun:test"
import { rand, Random } from "../rand"

function testRandomInstance(r: Random, expectedSeedArray: number[], next: "next" | "nextDouble" = "next") {
	if (next === "next") {
		const values = []
		for (let i = 0; i < expectedSeedArray.length; i++) {
			values.push(r.next())
		}
		expect(values).toEqual(expectedSeedArray)
	} else {
		const values = []
		for (let i = 0; i < expectedSeedArray.length; i++) {
			values.push(r.nextDouble())
		}
		expect(values).toEqual(expectedSeedArray)
	}
}

describe("Random class", () => {
	test("global seed", () => {
		expect(new Random().seed).not.toBeNull()
		expect(Random.getGlobalRandomSeed()).toBePositive()
		Random.resetGlobalRandom(12345)
		expect(Random.getGlobalRandomSeed()).toBe(12345)
	})
	test("constructor with seed", () => {
		const r1 = new Random(12345)
		const r2 = new Random(12345)
		expect(r1.seed).toBe(12345)
		for (let i = 0; i < 500; i++) {
			expect(r1.next()).toBe(r2.next())
			expect(r1.nextDouble()).toBe(r2.nextDouble())
		}
		expect(r1.timesSampled).toBe(1000)
		expect(r2.timesSampled).toBe(1000)
	})
	test("constructor without seed", () => {
		const r1 = new Random()
		const r2 = new Random()
		expect(r1.seed).not.toBe(r2.seed)
		// @ts-ignore
		expect(r1.seedArray).not.toEqual(r2.seedArray)
	})
	test("next with seedArray", () => {
		const r = new Random(1624159124)
		const x = new Int32Array([
			0, 1545564660, 1835642589, 87644527, 495420760, 304881325, 962440290, 1494083482, 1798828867, 2025434331,
			155577706, 807394878, 1248094852, 330554235, 519692500, 1827147490, 956084403, 568142581, 1035893648,
			158478492, 573110291, 1820573864, 740064685, 272944728, 2087782187, 1092827305, 730131912, 1550895216,
			713255708, 419026891, 422926314, 167699433, 426443564, 1582116709, 2107633173, 850115648, 1313262366,
			1226545563, 587224330, 1241274039, 900945312, 728744519, 143204656, 1539529184, 1211655580, 1288511460,
			138497111, 2075687426, 762486449, 1288205766, 57303206, 1646173515, 933975764, 608769633, 782649302,
			173253331,
		])
		const values = [
			805499975, 1562697861, 147345987, 1550077102, 1722233060, 1559028721, 780827774, 1379801976, 1602508017,
			2135361920, 380951314, 1813461790, 370404709, 1817060499, 513885124, 1877022487, 2128401898, 1942103256,
			1405016827, 1991849419,
		]
		// @ts-ignore
		expect(r.seedArray).toEqual(x)
		testRandomInstance(r, values, "next")
	})
	test("next", () => {
		const values = [
			878335499, 774951496, 2113816180, 2040481990, 2114038047, 542282147, 2026145236, 580918447, 1190653016,
			1674020836, 423763470, 1831073013, 1807159356, 1947354756, 275326220, 1667585610, 649805515, 1449040749,
			854538777, 1684930900,
		]
		testRandomInstance(new Random(1994604437), values, "next")
	})
	test("nextDouble", () => {
		const values = [
			0.4090068393428842, 0.36086491139645915, 0.9843223639690887, 0.9501734706341165, 0.984425678841968,
			0.2525198027736134, 0.9434973993075534, 0.2705112319767993, 0.554441016425584, 0.7795266978347333,
			0.1973302430460836, 0.8526598167850914, 0.8415241524770503, 0.9068077229460737, 0.12820876209447568,
			0.7765300622100616, 0.3025892727554726, 0.6747621808549213, 0.3979256271374997, 0.7846070922839489,
			0.9012418877804846, 0.34242870115788127, 0.5226760569599811, 0.9844697220178645, 0.6484068867975878,
			0.0011025881399878245, 0.48430796083263494, 0.29945547101062514, 0.9265222861089382, 0.08775064213562321,
		]
		testRandomInstance(new Random(1994604437), values, "nextDouble")
	})
	test("207 length test", () => {
		const values = [
			437695727, 1125081161, 148250893, 740276828, 1620378233, 1470998353, 983483877, 2019694348, 1833592518,
			1943372530, 1192230859, 1474462820, 2029818739, 2038513045, 605975620, 871547851, 949211554, 806053164,
			1396102232, 1991548195, 1468959067, 1294320790, 1767158205, 1467331156, 1292648297, 1896445240, 159458578,
			146055351, 581114311, 592169389, 1756527447, 407850874, 1922100727, 2069042858, 630326929, 1545384147,
			433888299, 1502177028, 369130826, 836771487, 1583625912, 940917114, 1174267746, 344214760, 815747374,
			1963069901, 2140910224, 948206162, 105508730, 191438221, 631132390, 575582265, 1917859137, 610403231,
			2136067140, 1290858584, 1505406603, 828403384, 1595112178, 1871416640, 1311539775, 837428526, 1438580037,
			1241423129, 186845083, 784379985, 1699845740, 2108259528, 1408186116, 1208075120, 437659552, 1594518173,
			436922338, 559330745, 407922283, 528041953, 120053044, 1422943445, 651583782, 1477062043, 1903018663,
			1358736063, 40546621, 389676090, 2108520646, 1180945182, 637475384, 1311697496, 2080459365, 1486951992,
			39977544, 1752968562, 2054548497, 645197833, 1672715359, 746197386, 1649820724, 2080328264, 157369677,
			31367389, 263224161, 32650696, 1687503693, 1044917257, 1901262316, 1184097864, 138659927, 1358528392,
			202480948, 1608025187, 1170805540, 82463158, 176819602, 118050135, 2115881624, 2100287359, 796881905,
			1048903947, 1280386130, 1153383548, 146904601, 388148244, 27800163, 2068717771, 1168097576, 832174637,
			1687453323, 1939208152, 1034099033, 1809208544, 1025704876, 187208427, 1265573768, 620216393, 1213837882,
			1870367967, 1818716017, 1143113011, 635897421, 924422782, 1042285255, 1426430639, 1109216548, 472434178,
			316146452, 2104998033, 1576148960, 1936498362, 676799856, 1719911647, 2096799128, 600916777, 799942134,
			1151469776, 2031946435, 2022559564, 4850533, 1766269569, 2024303328, 1069087679, 1644128188, 346935422,
			324429359, 540756051, 582320311, 983597113, 964373037, 1704086856, 1051695900, 245513657, 281571342,
			1801252541, 413006526, 355963348, 111098293, 867957609, 1426415343, 1702849632, 1752571319, 1210583190,
			1403509324, 1898438608, 1262408296, 1461671033, 1859893063, 424788099, 1534749940, 114103992, 735753605,
			1338761965, 1865517434, 52446448, 1266293330, 1714293389, 1427778241, 695349833, 1102001280, 568460497,
			2037597514, 1480032986, 1140624996, 2019545751, 884802462, 431286199, 1438340305, 295546587, 187910251,
		]
		testRandomInstance(new Random(2147483646), values, "next")
	})
	test("globalSeed", () => {
		const seed = 111098293
		Random.resetGlobalRandom(seed)
		const randoms = [new Random(), new Random(), new Random(), new Random(), new Random()]
		const seeds = [757298546, 785980687, 724952582, 1716100695, 446283163]
		const values = [
			[1192426363, 617632791, 1348958423, 1169300282, 1009622889],
			[169240623, 964973616, 1564103378, 1664305905, 252510186],
			[321728297, 528516855, 540602141, 420319589, 2115648711],
			[1056148836, 836587111, 49940358, 168965502, 235890],
			[802811609, 1199379690, 123205559, 1588758178, 425100290],
		]
		testRandomInstance(new Random(seed), seeds, "next")
		for (let i = 0; i < randoms.length; i++) {
			expect(randoms[i].seed, `seed ${i} wrong`).toBe(seeds[i])
			testRandomInstance(randoms[i], values[i], "next")
		}
	})
})
describe("rand", () => {
	test("with seeded Random instance", () => {
		const r = new Random(1994604437)
		const values = [
			0.4090068393428842, 0.36086491139645915, 0.9843223639690887, 0.9501734706341165, 0.984425678841968,
			0.2525198027736134, 0.9434973993075534, 0.2705112319767993, 0.554441016425584, 0.7795266978347333,
			0.1973302430460836, 0.8526598167850914, 0.8415241524770503, 0.9068077229460737, 0.12820876209447568,
			0.7765300622100616, 0.3025892727554726, 0.6747621808549213, 0.3979256271374997, 0.7846070922839489,
			0.9012418877804846, 0.34242870115788127, 0.5226760569599811, 0.9844697220178645, 0.6484068867975878,
			0.0011025881399878245, 0.48430796083263494, 0.29945547101062514, 0.9265222861089382, 0.08775064213562321,
		]
		for (let i = 0; i < values.length; i++) {
			expect(rand(r)).toBe(values[i])
		}
		expect(r.timesSampled).toBe(values.length)
	})
	test("with unseeded Random instance ", () => {
		Random.resetGlobalRandom(12345)
		const values11 = []
		const values21 = []
		const r11 = new Random()
		const r12 = new Random()
		for (let i = 0; i < 500; i++) {
			values11.push(rand(r11))
			values21.push(rand(r12))
		}
		Random.resetGlobalRandom(12345)
		const values12 = []
		const values22 = []
		const r21 = new Random()
		const r22 = new Random()
		for (let i = 0; i < 500; i++) {
			values12.push(rand(r21))
			values22.push(rand(r22))
		}
		expect(values11).toEqual(values12)
		expect(values21).toEqual(values22)
		// seeds should be same too
		expect(r11.seed).toBe(r21.seed)
		expect(r12.seed).toBe(r22.seed)

		expect(r11.timesSampled).toBe(r21.timesSampled)
		expect(r12.timesSampled).toBe(r22.timesSampled)
	})
	test("without Random instance", () => {
		for (let i = 0; i < 100; i++) {
			expect(typeof rand()).toBe("number")
			expect(rand()).toBeGreaterThanOrEqual(0)
			expect(rand()).toBeLessThan(1)
		}
	})
})
